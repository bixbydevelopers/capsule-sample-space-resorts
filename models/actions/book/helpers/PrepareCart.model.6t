action (PrepareCart) {
  description (Prepare cart)
  type(UpdateTransaction)
  collect {

    input (cart) {
      type (Cart)
      min (Required)
      hidden
    }

    input (promptFlag) {
      type (PromptFlag)
      hidden
    }

    computed-input (numberOfAstronauts) {
      type (NumberOfAstronauts)
      min (Required)
      compute {
        if ("exists(promptFlag) && promptFlag == 'NumberOfAstronauts'") {
          // Force selection prompt
          intent {
            goal-set {
              @prompt-behavior(AlwaysSelection)
              NumberOfAstronauts {
                NumberOfAstronauts(1) NumberOfAstronauts(2) NumberOfAstronauts(3) NumberOfAstronauts(4)
              }
            }
          }
        } else-if ("exists(cart.desiredNumberOfAstronauts)") {
          // Re-use previously stored value
          intent {
            goal: $expr(cart.desiredNumberOfAstronauts)
          }
        } else {
          // Default
          intent {
            goal: NumberOfAstronauts(1)        
          }
        }
      }
    }

    computed-input (dateTimeExpression) {
      type (time.DateTimeExpression)
      min (Required)
      compute {
        if ("exists(promptFlag) && promptFlag == 'DateInterval'") {
          // Force prompt for Date
          intent {
            goal { @prompt-behavior(AlwaysElicitation) time.DateInterval }
          }
        } else-if ("exists(cart.desiredDateTimeExpression)") { 
          // Re-use previously stored value
          intent {
            goal: $expr(cart.desiredDateTimeExpression)
          }
        } else { 
          // Prompt
          intent {
            goal { @prompt-behavior(AlwaysElicitation) time.DateInterval }
          }
        }
      }
    }

    computed-input (cartWithOpenings) {
      description (Adjust cart with new information and make sure it has matching openings)
      type (Cart)
      min (Required)
      compute {
        intent {
          goal: SaveToCart
          value: $expr(cart)
          value: $expr(numberOfAstronauts)
          value: $expr(dateTimeExpression)
        }
      }
    }

    computed-input (opening) {
      type (Opening)
      min (Required)
      compute {
        if ("exists(promptFlag) && promptFlag == 'Opening'") {
          intent {
            goal { @prompt-behavior(AlwaysSelection) Opening }
            value: $expr(cartWithOpenings.openings)
          }
        } else-if (exists(cartWithOpenings.desiredOpening)) {
          intent {
            goal: $expr(cartWithOpenings.desiredOpening)
          }
        } else {
          intent {
            goal: $expr(cartWithOpenings.openings)
          }
        }
      }
    }

    computed-input (hold) {
      type (Hold)
      min (Required)
      compute {
        intent {
          goal: PlaceHold
          value: $expr(opening)
        }
      }
    }

    computed-input (self) {
      type(Self)
      min (Required)
      compute {
        // Force prompt for Self
        if ("exists(promptFlag) && promptFlag == 'Self'") {
          intent {
            goal { Self }
            value{ @prompt-behavior(AlwaysElicitation) $expr(cartWithOpenings.self) } // TODO: VIV-16979, VIV-16738 Weird... should be AlwaysElicitation
          }
        } else-if (exists(cartWithOpenings.self)) {
          intent {
            goal: $expr(cartWithOpenings.self)
          }
        } else {
          intent {
            goal: ConstructSelfFromProfile
          }
        }
      }
    }
  }
  output (Cart)
}
