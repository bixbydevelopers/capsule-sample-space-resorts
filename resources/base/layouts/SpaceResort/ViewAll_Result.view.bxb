result-view {
  // This view handles the Find flow space resort results. For example: "Find space resorts around Jupiter."
  // These are trained as a property projection to the `SpaceResort#all` property to indicate that we want to present the entire space resort information (see the README for more details about this annotation pattern)
  // We use the following match pattern to identify results with that goal, then we render the space resort result(s) accordingly in the `render` block
  match {
    ViewAll {
      from-property {
        SpaceResort (result)
      }
    }
  }

  message {
    macro (SPACE_RESORT_RESULT) { param (result) {expression (result) } }
  }

  render {
    if (size(result) == 1) {
      // Dialog comes from `message`
      layout-macro (space-resort-details) {
        param (spaceResort) {
          expression (result)
        }
      }
    } else-if (size(result) > 1) {
      if ($can.device == 'bixby-speaker') {
        list-of (result) {
          navigation-mode {
            read-one {
              list-summary {
                macro (SPACE_RESORT_RESULT) { param (result) { expression (result) } }
              }
              page-content {
                item-selection-question {
                  macro (READ_ONE_ITEM_SELECTION_QUESTION)
                }
                overflow-statement {
                  macro (OVERFLOW_STATEMENT)
                }
                underflow-statement {
                  macro (UNDERFLOW_STATEMENT)
                }
              }
            }
          }
          where-each (page) {
            spoken-summary {
              macro ("SPACE_RESORT_SUMMARY") { param(spaceResort) { expression(page) } }
            }
          }
          // We highlight a few top results for the user with a more prominent layout
          highlights {
            // TODO: Remove labels and layout-macros when VIV-25597 is ready
            select(pick) {
              // This first highlight uses preference learning to present a personalized recommendation based on the user's past behavior
              label { macro (HIGHLIGHT_LABEL_BY_PREFERENCES) }
              order-by { sorting (pick) { by-preferences } }
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
              summary { macro (SPACE_RESORT_HIGHLIGHT) { param (spaceResort) { expression (pick) } param (byPreferences) { expression (true) } } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              summary { macro (SPACE_RESORT_HIGHLIGHT) { param (spaceResort) { expression (pick) } } }
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              summary { macro (SPACE_RESORT_HIGHLIGHT) { param (spaceResort) { expression (pick) } } }
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              summary { macro (SPACE_RESORT_HIGHLIGHT) { param (spaceResort) { expression (pick) } } }
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
          }
        }
      } else {
        list-of (result) {
          where-each (item) {
            layout-macro (space-resort-summary) {
              param (spaceResort) {
                expression(item)
              }
            }
          }
          // We highlight a few top results for the user with a more prominent layout
          highlights {
            select(pick) {
              // This first highlight uses preference learning to present a personalized recommendation based on the user's past behavior
              label { macro (HIGHLIGHT_LABEL_BY_PREFERENCES) }
              order-by { sorting (pick) { by-preferences } }
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
            select(pick) {
              label("#{raw(pick.highlight.label)}")
              filter-by (exists(pick.highlight))
              layout-macro (space-resort-highlight) { param (spaceResort) { expression(pick) } }
            }
          }
        }
      }
    }
  }

  followup {
    if ($can.device == 'bixby-speaker') {
      prompt {
        dialog {
          macro (MAKE_RESERVATION_FOLLOWUP_PROMPT)
        }
        on-confirm {
          intent {
            goal {
              CommitOrder
              @context (Continuation) { SpaceResort }
            }
            route { CreateOrder }
            route { CreateItem }
          }
        }
      }
    }
  }

  conversation-drivers {
    if ("size(result) == 1") {
      conversation-driver {
        macro (MakeReservation)
      }
    }
  }
}
