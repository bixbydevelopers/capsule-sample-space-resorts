template-macro-def (RECEIPT_ACTIVITY_CARD_MESSAGE) {
  params {
    param (receipt) {
      type (Receipt)
      min (Required) max (One)
    }
  }
  content {
    template ("Suit up, your trip[ to #{value(receipt.item.spaceResort.planet)}] is starting soon!")
  }
}

template-macro-def (RECEIPT_ACTIVITY_CARD_DETAILS) {
  params {
    param (receipt) {
      type (Receipt)
      min (Required) max (One)
    }
  }
  content {
    if (receipt.canceled) {
      template ("Reservation canceled")
    } else {
      template("Reservation for #{value(receipt.item.numberOfAstronauts)}")
    }
  }
}

template-macro-def (RECEIPT_RESULT) {
  params {
    param (receipt) {
      type (Receipt)
      min (Optional) max (Many)
    }
  }
  content {
    if ("exists(receipt.canceled) && receipt.canceled == true") {
      template ("Your trip has been canceled.")
    } else {
      template ("All set! I hope you have a great time[ at #{value(receipt.item.spaceResort)}].")
    }
  }
}

template-macro-def (SPACE_RESORT_SELECTION) {
  content {
    template("Which space resort would you like?")
  }
}

template-macro-def (NUMBER_OF_ASTRONAUTS_SELECTION) {
  content {
    template ("How many astronauts?")
  }
}

template-macro-def (HABITAT_POD_SELECTION) {
  content {
    template ("Which habitat pod would you like?")
  }
}

template-macro-def (DATE_INTERVAL_ELICITATION) {
  content {
    template ("When do you want to stay?")
  }
}

template-macro-def (COMMIT_ORDER_CONFIRMATION) {
  content {
    template ("Are you sure you want to book this trip?")
  }
}

template-macro-def (COMMIT_ORDER_CONFIRMATION_LONG) {
  params {
    param (action) {
      type (CommitOrder)
      min (Required) max (One)
    }
  }
  content {
    template ("Alright, I am ready to place your order[ for #{value(action.order.item.numberOfAstronauts)}][ in #{value(action.order.item.pod.name)}][ at #{value(action.order.item.spaceResort)}][ on #{value(action.order.item.spaceResort.planet)}][ #{input(action.order.item.dateInterval)}].[ The total cost is #{value(action.order.item.pod.price)}][ and your email is #{value(action.order.buyer.emailInfo.address)}]. Would you like me to proceed?")
  }
}

template-macro-def (SPACE_RESORT_RESULT) {
  params {
    param (result) {
      type (SpaceResort)
      min (Optional) max (Many)
    }
  }
  content {
    if (size(result) == 1) {
      if ($can.device == 'bixby-mobile') {
        template ("Check out this #{concept(result)}.")        
      } else-if ($can.device == 'bixby-speaker') {
        template ("#{macro('SPACE_RESORT_NAME_WITH_EMPHASIS', result)} #{macro('SPACE_RESORT_DETAILS', result)}")        
      }
    } else-if (size(result) < 10) {
      template ("I found #{size(result)} #{concept(result)}.")
    } else {
      template ("I found these #{concept(result)}.")
    }
  }
}

template-macro-def (SPACE_RESORT_NAME_WITH_EMPHASIS) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Required) max (One)
    }
  }
  content {
    choose (Random) {
      // TODO: Remove the ".name" part when VIV-25705 is ready
      template ("#{value(spaceResort.name)} is great.")
      template ("#{value(spaceResort.name)} sounds fun.")
      template ("#{value(spaceResort.name)} is good.")
      template ("#{value(spaceResort.name)} is lovely.")
      template ("You'll love #{value(spaceResort.name)}.")
      template ("You'll enjoy #{value(spaceResort.name)}.")
    }
  }
}

template-macro-def (SPACE_RESORT_SUMMARY) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Required) max (One)
    }
  }
  content {
    template ("#{value(spaceResort)} attributes are #{value(spaceResort.attributes)}")
  }
}

template-macro-def (SPACE_RESORT_DETAILS) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Required) max (One)
    }
  }
  content {
    template ("#{value(spaceResort.description)}")
  }
}

template-macro-def (SPACE_RESORT_HIGHLIGHT) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Required) max (One)
    }
    param (byPreferences) {
      type (core.Boolean)
      min (Required) max (One) default (false)
    }
  }
  content {
    if (byPreferences) {
      template ("Based on your preferences, you may enjoy #{value(spaceResort)}")
    } else {
      template ("#{value(spaceResort.highlight.dialog)}")
    }
  }
}

template-macro-def (UNDERFLOW_STATEMENT) {
  content {
    template ("This is the first option.")
  }
}

template-macro-def (OVERFLOW_STATEMENT) {
  content {
    template ("That's all I have.")
  }
}

template-macro-def (READ_ONE_ITEM_SELECTION_QUESTION) {
  content {
    choose (Random) {
      template ("Want to pick this one?")
      template ("Does that sound good?")
      template ("Would you like this one?")
    }
  }
}

template-macro-def (READ_MANY_ITEM_SELECTION_QUESTION) {
  content {
    template ("Which one would you like?")
  }
}

template-macro-def (HIGHLIGHT_LABEL_BY_PREFERENCES) {
  content {
    template ("Based on your preferences")
  }
}

// Exception handling
template-macro-def (UNSUPPORTED_SEARCH_OPTION) {
  content {
    template ("Unsupported search criteria.")
  }
}

template-macro-def (UNKNOWN_ERROR) {
  content {
    template ("Something's wrong.")
  }
}

template-macro-def (HABITAT_POD_SUMMARY) {
  params {
    param (habitatPod) {
      type (HabitatPod)
      min (Required) max (One)
    }
  }
  content {
    template ("#{value(habitatPod.name)} costs #{value(habitatPod.price)}. #{value(habitatPod.highlight.dialog)}")
  }
}

template-macro-def (GRAVITY_FROM_SPACE_RESORT_RESULT) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Optional) max (Many)
    }
  }
  content {
    template ("The gravity at #{value(spaceResort)} is #{value(spaceResort.gravity)}.")
  }
}

template-macro-def (PLANET_FROM_SPACE_RESORT_RESULT) {
  params {
    param (spaceResort) {
      type (SpaceResort)
      min (Optional) max (Many)
    }
  }
  content {
    template ("#{value(spaceResort)} is #{input(spaceResort.planet)}.")
  }
}

template-macro-def (NEXT_ITEM_QUESTION) {
  content {
    template ("Would you like to hear the next one?")
  }
}

template-macro-def (MAKE_RESERVATION_FOLLOWUP_PROMPT) {
  content {
    template ("Would you like to make a reservation?")
  }
}